{"ast":null,"code":"import isEqual from 'react-fast-compare';\nimport { lerp, random, randomElement, twoPi } from './utils.js';\nexport const defaultConfig = {\n  color: '#dee4fd',\n  radius: [0.5, 3.0],\n  speed: [1.0, 3.0],\n  wind: [-0.5, 2.0],\n  changeFrequency: 200,\n  rotationSpeed: [-1.0, 1.0],\n  opacity: [1, 1]\n};\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\nclass Snowflake {\n  /**\r\n   * A utility function to create a collection of snowflakes\r\n   * @param canvas The canvas element\r\n   * @param amount The number of snowflakes\r\n   * @param config The configuration for each snowflake\r\n   */\n  static createSnowflakes(canvas, amount, config) {\n    if (!canvas) return [];\n    const snowflakes = [];\n    for (let i = 0; i < amount; i++) {\n      snowflakes.push(new Snowflake(canvas, config));\n    }\n    return snowflakes;\n  }\n  constructor(canvas, config = {}) {\n    // Set custom config\n    this.updateConfig(config);\n    // Setting initial parameters\n    const {\n      radius,\n      wind,\n      speed,\n      rotationSpeed,\n      opacity\n    } = this.config;\n    this.params = {\n      x: random(0, canvas.offsetWidth),\n      y: random(-canvas.offsetHeight, 0),\n      rotation: random(0, 360),\n      radius: random(...radius),\n      speed: random(...speed),\n      wind: random(...wind),\n      rotationSpeed: random(...rotationSpeed),\n      nextSpeed: random(...speed),\n      nextWind: random(...wind),\n      nextRotationSpeed: random(...rotationSpeed),\n      opacity: random(...opacity)\n    };\n    this.framesSinceLastUpdate = 0;\n  }\n  selectImage() {\n    if (this.config.images && this.config.images.length > 0) {\n      this.image = randomElement(this.config.images);\n    } else {\n      this.image = undefined;\n    }\n  }\n  updateConfig(config) {\n    const previousConfig = this.config;\n    this.config = {\n      ...defaultConfig,\n      ...config\n    };\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5);\n    // Update the radius if the config has changed, it won't gradually update on it's own\n    if (this.params && !isEqual(this.config.radius, previousConfig === null || previousConfig === void 0 ? void 0 : previousConfig.radius)) {\n      this.params.radius = random(...this.config.radius);\n    }\n    if (!isEqual(this.config.images, previousConfig === null || previousConfig === void 0 ? void 0 : previousConfig.images)) {\n      this.selectImage();\n    }\n  }\n  updateTargetParams() {\n    this.params.nextSpeed = random(...this.config.speed);\n    this.params.nextWind = random(...this.config.wind);\n    if (this.image) {\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed);\n    }\n  }\n  update(offsetWidth, offsetHeight, framesPassed = 1) {\n    const {\n      x,\n      y,\n      rotation,\n      rotationSpeed,\n      nextRotationSpeed,\n      wind,\n      speed,\n      nextWind,\n      nextSpeed,\n      radius\n    } = this.params;\n    // Update current location, wrapping around if going off the canvas\n    this.params.x = (x + wind * framesPassed) % (offsetWidth + radius * 2);\n    if (this.params.x > offsetWidth + radius) this.params.x = -radius;\n    this.params.y = (y + speed * framesPassed) % (offsetHeight + radius * 2);\n    if (this.params.y > offsetHeight + radius) this.params.y = -radius;\n    // Apply rotation\n    if (this.image) {\n      this.params.rotation = (rotation + rotationSpeed) % 360;\n    }\n    // Update the wind, speed and rotation towards the desired values\n    this.params.speed = lerp(speed, nextSpeed, 0.01);\n    this.params.wind = lerp(wind, nextWind, 0.01);\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01);\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\n      this.updateTargetParams();\n      this.framesSinceLastUpdate = 0;\n    }\n  }\n  getImageOffscreenCanvas(image, size) {\n    var _a, _b;\n    if (image instanceof HTMLImageElement && image.loading) return image;\n    let sizes = Snowflake.offscreenCanvases.get(image);\n    if (!sizes) {\n      sizes = {};\n      Snowflake.offscreenCanvases.set(image, sizes);\n    }\n    if (!(size in sizes)) {\n      const canvas = document.createElement('canvas');\n      canvas.width = size;\n      canvas.height = size;\n      (_a = canvas.getContext('2d')) === null || _a === void 0 ? void 0 : _a.drawImage(image, 0, 0, size, size);\n      sizes[size] = canvas;\n    }\n    return (_b = sizes[size]) !== null && _b !== void 0 ? _b : image;\n  }\n  /**\r\n   * Draws a circular snowflake to the canvas.\r\n   *\r\n   * This method should only be called if our config does not have images.\r\n   *\r\n   * This method assumes that a path has already been started on the canvas.\r\n   * `ctx.beginPath()` should be called before calling this method.\r\n   *\r\n   * After calling this method, the fillStyle should be set to the snowflake's\r\n   * color and `ctx.fill()` should be called to fill the snowflake.\r\n   *\r\n   * Calling `ctx.fill()` after multiple snowflakes have had `drawCircle` called\r\n   * will render all of the snowflakes since the last call to `ctx.beginPath()`.\r\n   *\r\n   * @param ctx The canvas context to draw to\r\n   */\n  drawCircle(ctx) {\n    ctx.moveTo(this.params.x, this.params.y);\n    ctx.arc(this.params.x, this.params.y, this.params.radius, 0, twoPi);\n  }\n  /**\r\n   * Draws an image-based snowflake to the canvas.\r\n   *\r\n   * This method should only be called if our config has images.\r\n   *\r\n   * @param ctx The canvas context to draw to\r\n   */\n  drawImage(ctx) {\n    const {\n      x,\n      y,\n      rotation,\n      radius\n    } = this.params;\n    const radian = rotation * Math.PI / 180;\n    const cos = Math.cos(radian);\n    const sin = Math.sin(radian);\n    // Save the current state to avoid affecting other drawings if changing the opacity\n    if (this.params.opacity !== 1) {\n      ctx.save();\n      ctx.globalAlpha = this.params.opacity; // Set the global alpha to the snowflake's opacity\n    }\n    // Translate to the location that we will be drawing the snowflake, including any rotation that needs to be applied\n    // The arguments for setTransform are: a, b, c, d, e, f\n    // a (scaleX), b (skewY), c (skewX), d (scaleY), e (translateX), f (translateY)\n    ctx.setTransform(cos, sin, -sin, cos, x, y);\n    // Draw the image with the center of the image at the center of the current location\n    const image = this.getImageOffscreenCanvas(this.image, radius);\n    ctx.drawImage(image, -(radius / 2), -(radius / 2), radius, radius);\n    // Reset the transform to avoid affecting other drawings if we were changing the opacity\n    if (this.params.opacity !== 1) {\n      ctx.restore();\n    }\n  }\n}\nSnowflake.offscreenCanvases = new WeakMap();\nexport default Snowflake;","map":{"version":3,"names":["isEqual","lerp","random","randomElement","twoPi","defaultConfig","color","radius","speed","wind","changeFrequency","rotationSpeed","opacity","Snowflake","createSnowflakes","canvas","amount","config","snowflakes","i","push","constructor","updateConfig","params","x","offsetWidth","y","offsetHeight","rotation","nextSpeed","nextWind","nextRotationSpeed","framesSinceLastUpdate","selectImage","images","length","image","undefined","previousConfig","updateTargetParams","update","framesPassed","getImageOffscreenCanvas","size","HTMLImageElement","loading","sizes","offscreenCanvases","get","set","document","createElement","width","height","_a","getContext","drawImage","_b","drawCircle","ctx","moveTo","arc","radian","Math","PI","cos","sin","save","globalAlpha","setTransform","restore","WeakMap"],"sources":["C:\\Users\\BAB AL SAFA\\Desktop\\zizi react\\node_modules\\react-snowfall\\src\\Snowflake.ts"],"sourcesContent":["import isEqual from 'react-fast-compare'\r\nimport { lerp, random, randomElement, twoPi } from './utils.js'\r\n\r\nexport interface SnowflakeProps {\r\n  /** The color of the snowflake, can be any valid CSS color. */\r\n  color: string\r\n  /**\r\n   * The minimum and maximum radius of the snowflake, will be\r\n   * randomly selected within this range.\r\n   *\r\n   * The default value is `[0.5, 3.0]`.\r\n   */\r\n  radius: [number, number]\r\n  /**\r\n   * The minimum and maximum speed of the snowflake.\r\n   *\r\n   * The speed determines how quickly the snowflake moves\r\n   * along the y axis (vertical speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1.0, 3.0]`.\r\n   */\r\n  speed: [number, number]\r\n  /**\r\n   * The minimum and maximum wind of the snowflake.\r\n   *\r\n   * The wind determines how quickly the snowflake moves\r\n   * along the x axis (horizontal speed).\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-0.5, 2.0]`.\r\n   */\r\n  wind: [number, number]\r\n  /**\r\n   * The frequency in frames that the wind and speed values\r\n   * will update.\r\n   *\r\n   * The default value is 200.\r\n   */\r\n  changeFrequency: number\r\n  /**\r\n   * An array of images that will be rendered as the snowflakes instead\r\n   * of the default circle shapes.\r\n   */\r\n  images?: CanvasImageSource[]\r\n  /**\r\n   * The minimum and maximum rotation speed of the snowflake (in degrees of\r\n   * rotation per frame).\r\n   *\r\n   * The rotation speed determines how quickly the snowflake rotates when\r\n   * an image is being rendered.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[-1.0, 1.0]`.\r\n   */\r\n  rotationSpeed: [number, number]\r\n  /**\r\n   * The minimum and maximum opacity of the snowflake image.\r\n   *\r\n   * This value only applies to snowflakes that are using images.\r\n   *\r\n   * The values will be randomly selected within this range.\r\n   *\r\n   * The default value is `[1, 1]`.\r\n   */\r\n  opacity: [number, number]\r\n}\r\n\r\nexport type SnowflakeConfig = Partial<SnowflakeProps>\r\n\r\nexport const defaultConfig: SnowflakeProps = {\r\n  color: '#dee4fd',\r\n  radius: [0.5, 3.0],\r\n  speed: [1.0, 3.0],\r\n  wind: [-0.5, 2.0],\r\n  changeFrequency: 200,\r\n  rotationSpeed: [-1.0, 1.0],\r\n  opacity: [1, 1],\r\n}\r\n\r\ninterface SnowflakeParams {\r\n  x: number\r\n  y: number\r\n  radius: number\r\n  rotation: number\r\n  rotationSpeed: number\r\n  speed: number\r\n  wind: number\r\n  nextSpeed: number\r\n  nextWind: number\r\n  nextRotationSpeed: number\r\n  opacity: number\r\n}\r\n\r\n/**\r\n * An individual snowflake that will update it's location every call to `update`\r\n * and draw itself to the canvas every call to `draw`.\r\n */\r\nclass Snowflake {\r\n  private static offscreenCanvases = new WeakMap<CanvasImageSource, Record<number, HTMLCanvasElement>>()\r\n\r\n  /**\r\n   * A utility function to create a collection of snowflakes\r\n   * @param canvas The canvas element\r\n   * @param amount The number of snowflakes\r\n   * @param config The configuration for each snowflake\r\n   */\r\n  static createSnowflakes(canvas: HTMLCanvasElement | null, amount: number, config: SnowflakeConfig): Snowflake[] {\r\n    if (!canvas) return []\r\n\r\n    const snowflakes: Snowflake[] = []\r\n\r\n    for (let i = 0; i < amount; i++) {\r\n      snowflakes.push(new Snowflake(canvas, config))\r\n    }\r\n\r\n    return snowflakes\r\n  }\r\n\r\n  private config!: SnowflakeProps\r\n  private params: SnowflakeParams\r\n  private framesSinceLastUpdate: number\r\n  private image?: CanvasImageSource\r\n\r\n  public constructor(canvas: HTMLCanvasElement, config: SnowflakeConfig = {}) {\r\n    // Set custom config\r\n    this.updateConfig(config)\r\n\r\n    // Setting initial parameters\r\n    const { radius, wind, speed, rotationSpeed, opacity } = this.config\r\n\r\n    this.params = {\r\n      x: random(0, canvas.offsetWidth),\r\n      y: random(-canvas.offsetHeight, 0),\r\n      rotation: random(0, 360),\r\n      radius: random(...radius),\r\n      speed: random(...speed),\r\n      wind: random(...wind),\r\n      rotationSpeed: random(...rotationSpeed),\r\n      nextSpeed: random(...speed),\r\n      nextWind: random(...wind),\r\n      nextRotationSpeed: random(...rotationSpeed),\r\n      opacity: random(...opacity),\r\n    }\r\n\r\n    this.framesSinceLastUpdate = 0\r\n  }\r\n\r\n  private selectImage() {\r\n    if (this.config.images && this.config.images.length > 0) {\r\n      this.image = randomElement(this.config.images)\r\n    } else {\r\n      this.image = undefined\r\n    }\r\n  }\r\n\r\n  public updateConfig(config: SnowflakeConfig): void {\r\n    const previousConfig = this.config\r\n    this.config = { ...defaultConfig, ...config }\r\n    this.config.changeFrequency = random(this.config.changeFrequency, this.config.changeFrequency * 1.5)\r\n\r\n    // Update the radius if the config has changed, it won't gradually update on it's own\r\n    if (this.params && !isEqual(this.config.radius, previousConfig?.radius)) {\r\n      this.params.radius = random(...this.config.radius)\r\n    }\r\n\r\n    if (!isEqual(this.config.images, previousConfig?.images)) {\r\n      this.selectImage()\r\n    }\r\n  }\r\n\r\n  private updateTargetParams(): void {\r\n    this.params.nextSpeed = random(...this.config.speed)\r\n    this.params.nextWind = random(...this.config.wind)\r\n    if (this.image) {\r\n      this.params.nextRotationSpeed = random(...this.config.rotationSpeed)\r\n    }\r\n  }\r\n\r\n  public update(offsetWidth: number, offsetHeight: number, framesPassed = 1): void {\r\n    const { x, y, rotation, rotationSpeed, nextRotationSpeed, wind, speed, nextWind, nextSpeed, radius } = this.params\r\n\r\n    // Update current location, wrapping around if going off the canvas\r\n    this.params.x = (x + wind * framesPassed) % (offsetWidth + radius * 2)\r\n    if (this.params.x > offsetWidth + radius) this.params.x = -radius\r\n    this.params.y = (y + speed * framesPassed) % (offsetHeight + radius * 2)\r\n    if (this.params.y > offsetHeight + radius) this.params.y = -radius\r\n\r\n    // Apply rotation\r\n    if (this.image) {\r\n      this.params.rotation = (rotation + rotationSpeed) % 360\r\n    }\r\n\r\n    // Update the wind, speed and rotation towards the desired values\r\n    this.params.speed = lerp(speed, nextSpeed, 0.01)\r\n    this.params.wind = lerp(wind, nextWind, 0.01)\r\n    this.params.rotationSpeed = lerp(rotationSpeed, nextRotationSpeed, 0.01)\r\n\r\n    if (this.framesSinceLastUpdate++ > this.config.changeFrequency) {\r\n      this.updateTargetParams()\r\n      this.framesSinceLastUpdate = 0\r\n    }\r\n  }\r\n\r\n  private getImageOffscreenCanvas(image: CanvasImageSource, size: number): CanvasImageSource {\r\n    if (image instanceof HTMLImageElement && image.loading) return image\r\n    let sizes = Snowflake.offscreenCanvases.get(image)\r\n\r\n    if (!sizes) {\r\n      sizes = {}\r\n      Snowflake.offscreenCanvases.set(image, sizes)\r\n    }\r\n\r\n    if (!(size in sizes)) {\r\n      const canvas = document.createElement('canvas')\r\n      canvas.width = size\r\n      canvas.height = size\r\n      canvas.getContext('2d')?.drawImage(image, 0, 0, size, size)\r\n      sizes[size] = canvas\r\n    }\r\n\r\n    return sizes[size] ?? image\r\n  }\r\n\r\n  /**\r\n   * Draws a circular snowflake to the canvas.\r\n   *\r\n   * This method should only be called if our config does not have images.\r\n   *\r\n   * This method assumes that a path has already been started on the canvas.\r\n   * `ctx.beginPath()` should be called before calling this method.\r\n   *\r\n   * After calling this method, the fillStyle should be set to the snowflake's\r\n   * color and `ctx.fill()` should be called to fill the snowflake.\r\n   *\r\n   * Calling `ctx.fill()` after multiple snowflakes have had `drawCircle` called\r\n   * will render all of the snowflakes since the last call to `ctx.beginPath()`.\r\n   *\r\n   * @param ctx The canvas context to draw to\r\n   */\r\n  public drawCircle(ctx: CanvasRenderingContext2D): void {\r\n    ctx.moveTo(this.params.x, this.params.y)\r\n    ctx.arc(this.params.x, this.params.y, this.params.radius, 0, twoPi)\r\n  }\r\n\r\n  /**\r\n   * Draws an image-based snowflake to the canvas.\r\n   *\r\n   * This method should only be called if our config has images.\r\n   *\r\n   * @param ctx The canvas context to draw to\r\n   */\r\n  public drawImage(ctx: CanvasRenderingContext2D): void {\r\n    const { x, y, rotation, radius } = this.params\r\n\r\n    const radian = (rotation * Math.PI) / 180\r\n    const cos = Math.cos(radian)\r\n    const sin = Math.sin(radian)\r\n\r\n    // Save the current state to avoid affecting other drawings if changing the opacity\r\n    if (this.params.opacity !== 1) {\r\n      ctx.save()\r\n      ctx.globalAlpha = this.params.opacity // Set the global alpha to the snowflake's opacity\r\n    }\r\n\r\n    // Translate to the location that we will be drawing the snowflake, including any rotation that needs to be applied\r\n    // The arguments for setTransform are: a, b, c, d, e, f\r\n    // a (scaleX), b (skewY), c (skewX), d (scaleY), e (translateX), f (translateY)\r\n    ctx.setTransform(cos, sin, -sin, cos, x, y)\r\n\r\n    // Draw the image with the center of the image at the center of the current location\r\n    const image = this.getImageOffscreenCanvas(this.image!, radius)\r\n    ctx.drawImage(image, -(radius / 2), -(radius / 2), radius, radius)\r\n\r\n    // Reset the transform to avoid affecting other drawings if we were changing the opacity\r\n    if (this.params.opacity !== 1) {\r\n      ctx.restore()\r\n    }\r\n  }\r\n}\r\n\r\nexport default Snowflake\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,oBAAoB;AACxC,SAASC,IAAI,EAAEC,MAAM,EAAEC,aAAa,EAAEC,KAAK,QAAQ,YAAY;AAoE/D,OAAO,MAAMC,aAAa,GAAmB;EAC3CC,KAAK,EAAE,SAAS;EAChBC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EAClBC,KAAK,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;EACjBC,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;EACjBC,eAAe,EAAE,GAAG;EACpBC,aAAa,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC;EAC1BC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC;CACf;AAgBD;;;;AAIA,MAAMC,SAAS;EAGb;;;;;;EAMA,OAAOC,gBAAgBA,CAACC,MAAgC,EAAEC,MAAc,EAAEC,MAAuB;IAC/F,IAAI,CAACF,MAAM,EAAE,OAAO,EAAE;IAEtB,MAAMG,UAAU,GAAgB,EAAE;IAElC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,MAAM,EAAEG,CAAC,EAAE,EAAE;MAC/BD,UAAU,CAACE,IAAI,CAAC,IAAIP,SAAS,CAACE,MAAM,EAAEE,MAAM,CAAC,CAAC;IAChD;IAEA,OAAOC,UAAU;EACnB;EAOAG,YAAmBN,MAAyB,EAAEE,MAAA,GAA0B,EAAE;IACxE;IACA,IAAI,CAACK,YAAY,CAACL,MAAM,CAAC;IAEzB;IACA,MAAM;MAAEV,MAAM;MAAEE,IAAI;MAAED,KAAK;MAAEG,aAAa;MAAEC;IAAO,CAAE,GAAG,IAAI,CAACK,MAAM;IAEnE,IAAI,CAACM,MAAM,GAAG;MACZC,CAAC,EAAEtB,MAAM,CAAC,CAAC,EAAEa,MAAM,CAACU,WAAW,CAAC;MAChCC,CAAC,EAAExB,MAAM,CAAC,CAACa,MAAM,CAACY,YAAY,EAAE,CAAC,CAAC;MAClCC,QAAQ,EAAE1B,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC;MACxBK,MAAM,EAAEL,MAAM,CAAC,GAAGK,MAAM,CAAC;MACzBC,KAAK,EAAEN,MAAM,CAAC,GAAGM,KAAK,CAAC;MACvBC,IAAI,EAAEP,MAAM,CAAC,GAAGO,IAAI,CAAC;MACrBE,aAAa,EAAET,MAAM,CAAC,GAAGS,aAAa,CAAC;MACvCkB,SAAS,EAAE3B,MAAM,CAAC,GAAGM,KAAK,CAAC;MAC3BsB,QAAQ,EAAE5B,MAAM,CAAC,GAAGO,IAAI,CAAC;MACzBsB,iBAAiB,EAAE7B,MAAM,CAAC,GAAGS,aAAa,CAAC;MAC3CC,OAAO,EAAEV,MAAM,CAAC,GAAGU,OAAO;KAC3B;IAED,IAAI,CAACoB,qBAAqB,GAAG,CAAC;EAChC;EAEQC,WAAWA,CAAA;IACjB,IAAI,IAAI,CAAChB,MAAM,CAACiB,MAAM,IAAI,IAAI,CAACjB,MAAM,CAACiB,MAAM,CAACC,MAAM,GAAG,CAAC,EAAE;MACvD,IAAI,CAACC,KAAK,GAAGjC,aAAa,CAAC,IAAI,CAACc,MAAM,CAACiB,MAAM,CAAC;IAChD,CAAC,MAAM;MACL,IAAI,CAACE,KAAK,GAAGC,SAAS;IACxB;EACF;EAEOf,YAAYA,CAACL,MAAuB;IACzC,MAAMqB,cAAc,GAAG,IAAI,CAACrB,MAAM;IAClC,IAAI,CAACA,MAAM,GAAG;MAAE,GAAGZ,aAAa;MAAE,GAAGY;IAAM,CAAE;IAC7C,IAAI,CAACA,MAAM,CAACP,eAAe,GAAGR,MAAM,CAAC,IAAI,CAACe,MAAM,CAACP,eAAe,EAAE,IAAI,CAACO,MAAM,CAACP,eAAe,GAAG,GAAG,CAAC;IAEpG;IACA,IAAI,IAAI,CAACa,MAAM,IAAI,CAACvB,OAAO,CAAC,IAAI,CAACiB,MAAM,CAACV,MAAM,EAAE+B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE/B,MAAM,CAAC,EAAE;MACvE,IAAI,CAACgB,MAAM,CAAChB,MAAM,GAAGL,MAAM,CAAC,GAAG,IAAI,CAACe,MAAM,CAACV,MAAM,CAAC;IACpD;IAEA,IAAI,CAACP,OAAO,CAAC,IAAI,CAACiB,MAAM,CAACiB,MAAM,EAAEI,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEJ,MAAM,CAAC,EAAE;MACxD,IAAI,CAACD,WAAW,EAAE;IACpB;EACF;EAEQM,kBAAkBA,CAAA;IACxB,IAAI,CAAChB,MAAM,CAACM,SAAS,GAAG3B,MAAM,CAAC,GAAG,IAAI,CAACe,MAAM,CAACT,KAAK,CAAC;IACpD,IAAI,CAACe,MAAM,CAACO,QAAQ,GAAG5B,MAAM,CAAC,GAAG,IAAI,CAACe,MAAM,CAACR,IAAI,CAAC;IAClD,IAAI,IAAI,CAAC2B,KAAK,EAAE;MACd,IAAI,CAACb,MAAM,CAACQ,iBAAiB,GAAG7B,MAAM,CAAC,GAAG,IAAI,CAACe,MAAM,CAACN,aAAa,CAAC;IACtE;EACF;EAEO6B,MAAMA,CAACf,WAAmB,EAAEE,YAAoB,EAAEc,YAAY,GAAG,CAAC;IACvE,MAAM;MAAEjB,CAAC;MAAEE,CAAC;MAAEE,QAAQ;MAAEjB,aAAa;MAAEoB,iBAAiB;MAAEtB,IAAI;MAAED,KAAK;MAAEsB,QAAQ;MAAED,SAAS;MAAEtB;IAAM,CAAE,GAAG,IAAI,CAACgB,MAAM;IAElH;IACA,IAAI,CAACA,MAAM,CAACC,CAAC,GAAG,CAACA,CAAC,GAAGf,IAAI,GAAGgC,YAAY,KAAKhB,WAAW,GAAGlB,MAAM,GAAG,CAAC,CAAC;IACtE,IAAI,IAAI,CAACgB,MAAM,CAACC,CAAC,GAAGC,WAAW,GAAGlB,MAAM,EAAE,IAAI,CAACgB,MAAM,CAACC,CAAC,GAAG,CAACjB,MAAM;IACjE,IAAI,CAACgB,MAAM,CAACG,CAAC,GAAG,CAACA,CAAC,GAAGlB,KAAK,GAAGiC,YAAY,KAAKd,YAAY,GAAGpB,MAAM,GAAG,CAAC,CAAC;IACxE,IAAI,IAAI,CAACgB,MAAM,CAACG,CAAC,GAAGC,YAAY,GAAGpB,MAAM,EAAE,IAAI,CAACgB,MAAM,CAACG,CAAC,GAAG,CAACnB,MAAM;IAElE;IACA,IAAI,IAAI,CAAC6B,KAAK,EAAE;MACd,IAAI,CAACb,MAAM,CAACK,QAAQ,GAAG,CAACA,QAAQ,GAAGjB,aAAa,IAAI,GAAG;IACzD;IAEA;IACA,IAAI,CAACY,MAAM,CAACf,KAAK,GAAGP,IAAI,CAACO,KAAK,EAAEqB,SAAS,EAAE,IAAI,CAAC;IAChD,IAAI,CAACN,MAAM,CAACd,IAAI,GAAGR,IAAI,CAACQ,IAAI,EAAEqB,QAAQ,EAAE,IAAI,CAAC;IAC7C,IAAI,CAACP,MAAM,CAACZ,aAAa,GAAGV,IAAI,CAACU,aAAa,EAAEoB,iBAAiB,EAAE,IAAI,CAAC;IAExE,IAAI,IAAI,CAACC,qBAAqB,EAAE,GAAG,IAAI,CAACf,MAAM,CAACP,eAAe,EAAE;MAC9D,IAAI,CAAC6B,kBAAkB,EAAE;MACzB,IAAI,CAACP,qBAAqB,GAAG,CAAC;IAChC;EACF;EAEQU,uBAAuBA,CAACN,KAAwB,EAAEO,IAAY;;IACpE,IAAIP,KAAK,YAAYQ,gBAAgB,IAAIR,KAAK,CAACS,OAAO,EAAE,OAAOT,KAAK;IACpE,IAAIU,KAAK,GAAGjC,SAAS,CAACkC,iBAAiB,CAACC,GAAG,CAACZ,KAAK,CAAC;IAElD,IAAI,CAACU,KAAK,EAAE;MACVA,KAAK,GAAG,EAAE;MACVjC,SAAS,CAACkC,iBAAiB,CAACE,GAAG,CAACb,KAAK,EAAEU,KAAK,CAAC;IAC/C;IAEA,IAAI,EAAEH,IAAI,IAAIG,KAAK,CAAC,EAAE;MACpB,MAAM/B,MAAM,GAAGmC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;MAC/CpC,MAAM,CAACqC,KAAK,GAAGT,IAAI;MACnB5B,MAAM,CAACsC,MAAM,GAAGV,IAAI;MACpB,CAAAW,EAAA,GAAAvC,MAAM,CAACwC,UAAU,CAAC,IAAI,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,SAAS,CAACpB,KAAK,EAAE,CAAC,EAAE,CAAC,EAAEO,IAAI,EAAEA,IAAI,CAAC;MAC3DG,KAAK,CAACH,IAAI,CAAC,GAAG5B,MAAM;IACtB;IAEA,OAAO,CAAA0C,EAAA,GAAAX,KAAK,CAACH,IAAI,CAAC,cAAAc,EAAA,cAAAA,EAAA,GAAIrB,KAAK;EAC7B;EAEA;;;;;;;;;;;;;;;;EAgBOsB,UAAUA,CAACC,GAA6B;IAC7CA,GAAG,CAACC,MAAM,CAAC,IAAI,CAACrC,MAAM,CAACC,CAAC,EAAE,IAAI,CAACD,MAAM,CAACG,CAAC,CAAC;IACxCiC,GAAG,CAACE,GAAG,CAAC,IAAI,CAACtC,MAAM,CAACC,CAAC,EAAE,IAAI,CAACD,MAAM,CAACG,CAAC,EAAE,IAAI,CAACH,MAAM,CAAChB,MAAM,EAAE,CAAC,EAAEH,KAAK,CAAC;EACrE;EAEA;;;;;;;EAOOoD,SAASA,CAACG,GAA6B;IAC5C,MAAM;MAAEnC,CAAC;MAAEE,CAAC;MAAEE,QAAQ;MAAErB;IAAM,CAAE,GAAG,IAAI,CAACgB,MAAM;IAE9C,MAAMuC,MAAM,GAAIlC,QAAQ,GAAGmC,IAAI,CAACC,EAAE,GAAI,GAAG;IACzC,MAAMC,GAAG,GAAGF,IAAI,CAACE,GAAG,CAACH,MAAM,CAAC;IAC5B,MAAMI,GAAG,GAAGH,IAAI,CAACG,GAAG,CAACJ,MAAM,CAAC;IAE5B;IACA,IAAI,IAAI,CAACvC,MAAM,CAACX,OAAO,KAAK,CAAC,EAAE;MAC7B+C,GAAG,CAACQ,IAAI,EAAE;MACVR,GAAG,CAACS,WAAW,GAAG,IAAI,CAAC7C,MAAM,CAACX,OAAO,EAAC;IACxC;IAEA;IACA;IACA;IACA+C,GAAG,CAACU,YAAY,CAACJ,GAAG,EAAEC,GAAG,EAAE,CAACA,GAAG,EAAED,GAAG,EAAEzC,CAAC,EAAEE,CAAC,CAAC;IAE3C;IACA,MAAMU,KAAK,GAAG,IAAI,CAACM,uBAAuB,CAAC,IAAI,CAACN,KAAM,EAAE7B,MAAM,CAAC;IAC/DoD,GAAG,CAACH,SAAS,CAACpB,KAAK,EAAE,EAAE7B,MAAM,GAAG,CAAC,CAAC,EAAE,EAAEA,MAAM,GAAG,CAAC,CAAC,EAAEA,MAAM,EAAEA,MAAM,CAAC;IAElE;IACA,IAAI,IAAI,CAACgB,MAAM,CAACX,OAAO,KAAK,CAAC,EAAE;MAC7B+C,GAAG,CAACW,OAAO,EAAE;IACf;EACF;;AAnLezD,SAAA,CAAAkC,iBAAiB,GAAG,IAAIwB,OAAO,EAAwD;AAsLxG,eAAe1D,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}